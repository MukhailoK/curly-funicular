#port api
server.port=8080

## Logging
logging.level.org.springframework=INFO

#database connection
spring.datasource.url=jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}
spring.datasource.username=${DB_USERNAME:root}
spring.datasource.password=${DB_PASSWORD:root}

# JPA
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.show-sql=false
spring.jpa.hibernate.ddl-auto=update
spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyJpaCompliantImpl
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.open-in-view=true

# Database initialization using SQL scripts
spring.sql.init.mode=never
spring.sql.init.schema-locations=classpath:db/mysql/schema_hbt.sql
spring.sql.init.data-locations=classpath:db/mysql/data.sql

# Active Spring profiles
spring.profiles.active=production

#Exception handler
server.error.include-message=on-param
server.error.include-exception=true
spring.jackson.serialization.write_dates_as_timestamps=false

# mail
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=${SERVICE_MAIL}
spring.mail.password=${MAIL_PASSWORD}
spring.mail.properties.mail.smtp.auth=true;
spring.mail.properties.mail.smtp.starttls.enable=true
# To enable/disable sending emails after creating an Appointment
send.email.after.appointment.creation=${SWITCH_SEND_MAIL}

#JWT
application.security.jwt.secret-key=${JWT_SECRET_KEY}
application.security.jwt.life-time=${JWT_LIVE_TIME}

#Spring actuator
spring.security.user.name=${ACTUATOR_USERNAME}
spring.security.user.password=${ACTUATOR_PASSWORD}
